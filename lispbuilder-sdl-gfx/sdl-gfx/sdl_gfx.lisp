;; SDL_ttf2.0.13 CFFI lisp wrapper
;; SDL_gfx library using CFFI for foreign function interfacing...
;; (C)2006 Luke Crook <luke@balooga.com>
;; see COPYING for license

(in-package #:lispbuilder-sdl-gfx)

(defparameter *font-data*
  '("0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x7e" "0x81" "0xa5" "0x81" "0xbd" "0x99" "0x81" "0x7e"
    "0x7e" "0xff" "0xdb" "0xff" "0xc3" "0xe7" "0xff" "0x7e" "0x6c" "0xfe" "0xfe" "0xfe" "0x7c" "0x38" "0x10" "0x00"
    "0x10" "0x38" "0x7c" "0xfe" "0x7c" "0x38" "0x10" "0x00" "0x38" "0x7c" "0x38" "0xfe" "0xfe" "0xd6" "0x10" "0x38"
    "0x10" "0x38" "0x7c" "0xfe" "0xfe" "0x7c" "0x10" "0x38" "0x00" "0x00" "0x18" "0x3c" "0x3c" "0x18" "0x00" "0x00"
    "0xff" "0xff" "0xe7" "0xc3" "0xc3" "0xe7" "0xff" "0xff" "0x00" "0x3c" "0x66" "0x42" "0x42" "0x66" "0x3c" "0x00"
    "0xff" "0xc3" "0x99" "0xbd" "0xbd" "0x99" "0xc3" "0xff" "0x0f" "0x07" "0x0f" "0x7d" "0xcc" "0xcc" "0xcc" "0x78"
    "0x3c" "0x66" "0x66" "0x66" "0x3c" "0x18" "0x7e" "0x18" "0x3f" "0x33" "0x3f" "0x30" "0x30" "0x70" "0xf0" "0xe0"
    "0x7f" "0x63" "0x7f" "0x63" "0x63" "0x67" "0xe6" "0xc0" "0x18" "0xdb" "0x3c" "0xe7" "0xe7" "0x3c" "0xdb" "0x18"
    "0x80" "0xe0" "0xf8" "0xfe" "0xf8" "0xe0" "0x80" "0x00" "0x02" "0x0e" "0x3e" "0xfe" "0x3e" "0x0e" "0x02" "0x00"
    "0x18" "0x3c" "0x7e" "0x18" "0x18" "0x7e" "0x3c" "0x18" "0x66" "0x66" "0x66" "0x66" "0x66" "0x00" "0x66" "0x00"
    "0x7f" "0xdb" "0xdb" "0x7b" "0x1b" "0x1b" "0x1b" "0x00" "0x3e" "0x61" "0x3c" "0x66" "0x66" "0x3c" "0x86" "0x7c"
    "0x00" "0x00" "0x00" "0x00" "0x7e" "0x7e" "0x7e" "0x00" "0x18" "0x3c" "0x7e" "0x18" "0x7e" "0x3c" "0x18" "0xff"
    "0x18" "0x3c" "0x7e" "0x18" "0x18" "0x18" "0x18" "0x00" "0x18" "0x18" "0x18" "0x18" "0x7e" "0x3c" "0x18" "0x00"
    "0x00" "0x18" "0x0c" "0xfe" "0x0c" "0x18" "0x00" "0x00" "0x00" "0x30" "0x60" "0xfe" "0x60" "0x30" "0x00" "0x00"
    "0x00" "0x00" "0xc0" "0xc0" "0xc0" "0xfe" "0x00" "0x00" "0x00" "0x24" "0x66" "0xff" "0x66" "0x24" "0x00" "0x00"
    "0x00" "0x18" "0x3c" "0x7e" "0xff" "0xff" "0x00" "0x00" "0x00" "0xff" "0xff" "0x7e" "0x3c" "0x18" "0x00" "0x00"
    "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x18" "0x3c" "0x3c" "0x18" "0x18" "0x00" "0x18" "0x00"
    "0x66" "0x66" "0x24" "0x00" "0x00" "0x00" "0x00" "0x00" "0x6c" "0x6c" "0xfe" "0x6c" "0xfe" "0x6c" "0x6c" "0x00"
    "0x18" "0x3e" "0x60" "0x3c" "0x06" "0x7c" "0x18" "0x00" "0x00" "0xc6" "0xcc" "0x18" "0x30" "0x66" "0xc6" "0x00"
    "0x38" "0x6c" "0x38" "0x76" "0xdc" "0xcc" "0x76" "0x00" "0x18" "0x18" "0x30" "0x00" "0x00" "0x00" "0x00" "0x00"
    "0x0c" "0x18" "0x30" "0x30" "0x30" "0x18" "0x0c" "0x00" "0x30" "0x18" "0x0c" "0x0c" "0x0c" "0x18" "0x30" "0x00"
    "0x00" "0x66" "0x3c" "0xff" "0x3c" "0x66" "0x00" "0x00" "0x00" "0x18" "0x18" "0x7e" "0x18" "0x18" "0x00" "0x00"
    "0x00" "0x00" "0x00" "0x00" "0x00" "0x18" "0x18" "0x30" "0x00" "0x00" "0x00" "0x7e" "0x00" "0x00" "0x00" "0x00"
    "0x00" "0x00" "0x00" "0x00" "0x00" "0x18" "0x18" "0x00" "0x06" "0x0c" "0x18" "0x30" "0x60" "0xc0" "0x80" "0x00"
    "0x38" "0x6c" "0xc6" "0xd6" "0xc6" "0x6c" "0x38" "0x00" "0x18" "0x38" "0x18" "0x18" "0x18" "0x18" "0x7e" "0x00"
    "0x7c" "0xc6" "0x06" "0x1c" "0x30" "0x66" "0xfe" "0x00" "0x7c" "0xc6" "0x06" "0x3c" "0x06" "0xc6" "0x7c" "0x00"
    "0x1c" "0x3c" "0x6c" "0xcc" "0xfe" "0x0c" "0x1e" "0x00" "0xfe" "0xc0" "0xc0" "0xfc" "0x06" "0xc6" "0x7c" "0x00"
    "0x38" "0x60" "0xc0" "0xfc" "0xc6" "0xc6" "0x7c" "0x00" "0xfe" "0xc6" "0x0c" "0x18" "0x30" "0x30" "0x30" "0x00"
    "0x7c" "0xc6" "0xc6" "0x7c" "0xc6" "0xc6" "0x7c" "0x00" "0x7c" "0xc6" "0xc6" "0x7e" "0x06" "0x0c" "0x78" "0x00"
    "0x00" "0x18" "0x18" "0x00" "0x00" "0x18" "0x18" "0x00" "0x00" "0x18" "0x18" "0x00" "0x00" "0x18" "0x18" "0x30"
    "0x06" "0x0c" "0x18" "0x30" "0x18" "0x0c" "0x06" "0x00" "0x00" "0x00" "0x7e" "0x00" "0x00" "0x7e" "0x00" "0x00"
    "0x60" "0x30" "0x18" "0x0c" "0x18" "0x30" "0x60" "0x00" "0x7c" "0xc6" "0x0c" "0x18" "0x18" "0x00" "0x18" "0x00"
    "0x7c" "0xc6" "0xde" "0xde" "0xde" "0xc0" "0x78" "0x00" "0x38" "0x6c" "0xc6" "0xfe" "0xc6" "0xc6" "0xc6" "0x00"
    "0xfc" "0x66" "0x66" "0x7c" "0x66" "0x66" "0xfc" "0x00" "0x3c" "0x66" "0xc0" "0xc0" "0xc0" "0x66" "0x3c" "0x00"
    "0xf8" "0x6c" "0x66" "0x66" "0x66" "0x6c" "0xf8" "0x00" "0xfe" "0x62" "0x68" "0x78" "0x68" "0x62" "0xfe" "0x00"
    "0xfe" "0x62" "0x68" "0x78" "0x68" "0x60" "0xf0" "0x00" "0x3c" "0x66" "0xc0" "0xc0" "0xce" "0x66" "0x3a" "0x00"
    "0xc6" "0xc6" "0xc6" "0xfe" "0xc6" "0xc6" "0xc6" "0x00" "0x3c" "0x18" "0x18" "0x18" "0x18" "0x18" "0x3c" "0x00"
    "0x1e" "0x0c" "0x0c" "0x0c" "0xcc" "0xcc" "0x78" "0x00" "0xe6" "0x66" "0x6c" "0x78" "0x6c" "0x66" "0xe6" "0x00"
    "0xf0" "0x60" "0x60" "0x60" "0x62" "0x66" "0xfe" "0x00" "0xc6" "0xee" "0xfe" "0xfe" "0xd6" "0xc6" "0xc6" "0x00"
    "0xc6" "0xe6" "0xf6" "0xde" "0xce" "0xc6" "0xc6" "0x00" "0x7c" "0xc6" "0xc6" "0xc6" "0xc6" "0xc6" "0x7c" "0x00"
    "0xfc" "0x66" "0x66" "0x7c" "0x60" "0x60" "0xf0" "0x00" "0x7c" "0xc6" "0xc6" "0xc6" "0xc6" "0xce" "0x7c" "0x0e"
    "0xfc" "0x66" "0x66" "0x7c" "0x6c" "0x66" "0xe6" "0x00" "0x3c" "0x66" "0x30" "0x18" "0x0c" "0x66" "0x3c" "0x00"
    "0x7e" "0x7e" "0x5a" "0x18" "0x18" "0x18" "0x3c" "0x00" "0xc6" "0xc6" "0xc6" "0xc6" "0xc6" "0xc6" "0x7c" "0x00"
    "0xc6" "0xc6" "0xc6" "0xc6" "0xc6" "0x6c" "0x38" "0x00" "0xc6" "0xc6" "0xc6" "0xd6" "0xd6" "0xfe" "0x6c" "0x00"
    "0xc6" "0xc6" "0x6c" "0x38" "0x6c" "0xc6" "0xc6" "0x00" "0x66" "0x66" "0x66" "0x3c" "0x18" "0x18" "0x3c" "0x00"
    "0xfe" "0xc6" "0x8c" "0x18" "0x32" "0x66" "0xfe" "0x00" "0x3c" "0x30" "0x30" "0x30" "0x30" "0x30" "0x3c" "0x00"
    "0xc0" "0x60" "0x30" "0x18" "0x0c" "0x06" "0x02" "0x00" "0x3c" "0x0c" "0x0c" "0x0c" "0x0c" "0x0c" "0x3c" "0x00"
    "0x10" "0x38" "0x6c" "0xc6" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0xff"
    "0x30" "0x18" "0x0c" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x78" "0x0c" "0x7c" "0xcc" "0x76" "0x00"
    "0xe0" "0x60" "0x7c" "0x66" "0x66" "0x66" "0xdc" "0x00" "0x00" "0x00" "0x7c" "0xc6" "0xc0" "0xc6" "0x7c" "0x00"
    "0x1c" "0x0c" "0x7c" "0xcc" "0xcc" "0xcc" "0x76" "0x00" "0x00" "0x00" "0x7c" "0xc6" "0xfe" "0xc0" "0x7c" "0x00"
    "0x3c" "0x66" "0x60" "0xf8" "0x60" "0x60" "0xf0" "0x00" "0x00" "0x00" "0x76" "0xcc" "0xcc" "0x7c" "0x0c" "0xf8"
    "0xe0" "0x60" "0x6c" "0x76" "0x66" "0x66" "0xe6" "0x00" "0x18" "0x00" "0x38" "0x18" "0x18" "0x18" "0x3c" "0x00"
    "0x06" "0x00" "0x06" "0x06" "0x06" "0x66" "0x66" "0x3c" "0xe0" "0x60" "0x66" "0x6c" "0x78" "0x6c" "0xe6" "0x00"
    "0x38" "0x18" "0x18" "0x18" "0x18" "0x18" "0x3c" "0x00" "0x00" "0x00" "0xec" "0xfe" "0xd6" "0xd6" "0xd6" "0x00"
    "0x00" "0x00" "0xdc" "0x66" "0x66" "0x66" "0x66" "0x00" "0x00" "0x00" "0x7c" "0xc6" "0xc6" "0xc6" "0x7c" "0x00"
    "0x00" "0x00" "0xdc" "0x66" "0x66" "0x7c" "0x60" "0xf0" "0x00" "0x00" "0x76" "0xcc" "0xcc" "0x7c" "0x0c" "0x1e"
    "0x00" "0x00" "0xdc" "0x76" "0x60" "0x60" "0xf0" "0x00" "0x00" "0x00" "0x7e" "0xc0" "0x7c" "0x06" "0xfc" "0x00"
    "0x30" "0x30" "0xfc" "0x30" "0x30" "0x36" "0x1c" "0x00" "0x00" "0x00" "0xcc" "0xcc" "0xcc" "0xcc" "0x76" "0x00"
    "0x00" "0x00" "0xc6" "0xc6" "0xc6" "0x6c" "0x38" "0x00" "0x00" "0x00" "0xc6" "0xd6" "0xd6" "0xfe" "0x6c" "0x00"
    "0x00" "0x00" "0xc6" "0x6c" "0x38" "0x6c" "0xc6" "0x00" "0x00" "0x00" "0xc6" "0xc6" "0xc6" "0x7e" "0x06" "0xfc"
    "0x00" "0x00" "0x7e" "0x4c" "0x18" "0x32" "0x7e" "0x00" "0x0e" "0x18" "0x18" "0x70" "0x18" "0x18" "0x0e" "0x00"
    "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0x00" "0x70" "0x18" "0x18" "0x0e" "0x18" "0x18" "0x70" "0x00"
    "0x76" "0xdc" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x10" "0x38" "0x6c" "0xc6" "0xc6" "0xfe" "0x00"
    "0x7c" "0xc6" "0xc0" "0xc0" "0xc6" "0x7c" "0x0c" "0x78" "0xcc" "0x00" "0xcc" "0xcc" "0xcc" "0xcc" "0x76" "0x00"
    "0x0c" "0x18" "0x7c" "0xc6" "0xfe" "0xc0" "0x7c" "0x00" "0x7c" "0x82" "0x78" "0x0c" "0x7c" "0xcc" "0x76" "0x00"
    "0xc6" "0x00" "0x78" "0x0c" "0x7c" "0xcc" "0x76" "0x00" "0x30" "0x18" "0x78" "0x0c" "0x7c" "0xcc" "0x76" "0x00"
    "0x30" "0x30" "0x78" "0x0c" "0x7c" "0xcc" "0x76" "0x00" "0x00" "0x00" "0x7e" "0xc0" "0xc0" "0x7e" "0x0c" "0x38"
    "0x7c" "0x82" "0x7c" "0xc6" "0xfe" "0xc0" "0x7c" "0x00" "0xc6" "0x00" "0x7c" "0xc6" "0xfe" "0xc0" "0x7c" "0x00"
    "0x30" "0x18" "0x7c" "0xc6" "0xfe" "0xc0" "0x7c" "0x00" "0x66" "0x00" "0x38" "0x18" "0x18" "0x18" "0x3c" "0x00"
    "0x7c" "0x82" "0x38" "0x18" "0x18" "0x18" "0x3c" "0x00" "0x30" "0x18" "0x00" "0x38" "0x18" "0x18" "0x3c" "0x00"
    "0xc6" "0x38" "0x6c" "0xc6" "0xfe" "0xc6" "0xc6" "0x00" "0x38" "0x6c" "0x7c" "0xc6" "0xfe" "0xc6" "0xc6" "0x00"
    "0x18" "0x30" "0xfe" "0xc0" "0xf8" "0xc0" "0xfe" "0x00" "0x00" "0x00" "0x7e" "0x18" "0x7e" "0xd8" "0x7e" "0x00"
    "0x3e" "0x6c" "0xcc" "0xfe" "0xcc" "0xcc" "0xce" "0x00" "0x7c" "0x82" "0x7c" "0xc6" "0xc6" "0xc6" "0x7c" "0x00"
    "0xc6" "0x00" "0x7c" "0xc6" "0xc6" "0xc6" "0x7c" "0x00" "0x30" "0x18" "0x7c" "0xc6" "0xc6" "0xc6" "0x7c" "0x00"
    "0x78" "0x84" "0x00" "0xcc" "0xcc" "0xcc" "0x76" "0x00" "0x60" "0x30" "0xcc" "0xcc" "0xcc" "0xcc" "0x76" "0x00"
    "0xc6" "0x00" "0xc6" "0xc6" "0xc6" "0x7e" "0x06" "0xfc" "0xc6" "0x38" "0x6c" "0xc6" "0xc6" "0x6c" "0x38" "0x00"
    "0xc6" "0x00" "0xc6" "0xc6" "0xc6" "0xc6" "0x7c" "0x00" "0x18" "0x18" "0x7e" "0xc0" "0xc0" "0x7e" "0x18" "0x18"
    "0x38" "0x6c" "0x64" "0xf0" "0x60" "0x66" "0xfc" "0x00" "0x66" "0x66" "0x3c" "0x7e" "0x18" "0x7e" "0x18" "0x18"
    "0xf8" "0xcc" "0xcc" "0xfa" "0xc6" "0xcf" "0xc6" "0xc7" "0x0e" "0x1b" "0x18" "0x3c" "0x18" "0xd8" "0x70" "0x00"
    "0x18" "0x30" "0x78" "0x0c" "0x7c" "0xcc" "0x76" "0x00" "0x0c" "0x18" "0x00" "0x38" "0x18" "0x18" "0x3c" "0x00"
    "0x0c" "0x18" "0x7c" "0xc6" "0xc6" "0xc6" "0x7c" "0x00" "0x18" "0x30" "0xcc" "0xcc" "0xcc" "0xcc" "0x76" "0x00"
    "0x76" "0xdc" "0x00" "0xdc" "0x66" "0x66" "0x66" "0x00" "0x76" "0xdc" "0x00" "0xe6" "0xf6" "0xde" "0xce" "0x00"
    "0x3c" "0x6c" "0x6c" "0x3e" "0x00" "0x7e" "0x00" "0x00" "0x38" "0x6c" "0x6c" "0x38" "0x00" "0x7c" "0x00" "0x00"
    "0x18" "0x00" "0x18" "0x18" "0x30" "0x63" "0x3e" "0x00" "0x00" "0x00" "0x00" "0xfe" "0xc0" "0xc0" "0x00" "0x00"
    "0x00" "0x00" "0x00" "0xfe" "0x06" "0x06" "0x00" "0x00" "0x63" "0xe6" "0x6c" "0x7e" "0x33" "0x66" "0xcc" "0x0f"
    "0x63" "0xe6" "0x6c" "0x7a" "0x36" "0x6a" "0xdf" "0x06" "0x18" "0x00" "0x18" "0x18" "0x3c" "0x3c" "0x18" "0x00"
    "0x00" "0x33" "0x66" "0xcc" "0x66" "0x33" "0x00" "0x00" "0x00" "0xcc" "0x66" "0x33" "0x66" "0xcc" "0x00" "0x00"
    "0x22" "0x88" "0x22" "0x88" "0x22" "0x88" "0x22" "0x88" "0x55" "0xaa" "0x55" "0xaa" "0x55" "0xaa" "0x55" "0xaa"
    "0x77" "0xdd" "0x77" "0xdd" "0x77" "0xdd" "0x77" "0xdd" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18"
    "0x18" "0x18" "0x18" "0x18" "0xf8" "0x18" "0x18" "0x18" "0x18" "0x18" "0xf8" "0x18" "0xf8" "0x18" "0x18" "0x18"
    "0x36" "0x36" "0x36" "0x36" "0xf6" "0x36" "0x36" "0x36" "0x00" "0x00" "0x00" "0x00" "0xfe" "0x36" "0x36" "0x36"
    "0x00" "0x00" "0xf8" "0x18" "0xf8" "0x18" "0x18" "0x18" "0x36" "0x36" "0xf6" "0x06" "0xf6" "0x36" "0x36" "0x36"
    "0x36" "0x36" "0x36" "0x36" "0x36" "0x36" "0x36" "0x36" "0x00" "0x00" "0xfe" "0x06" "0xf6" "0x36" "0x36" "0x36"
    "0x36" "0x36" "0xf6" "0x06" "0xfe" "0x00" "0x00" "0x00" "0x36" "0x36" "0x36" "0x36" "0xfe" "0x00" "0x00" "0x00"
    "0x18" "0x18" "0xf8" "0x18" "0xf8" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0xf8" "0x18" "0x18" "0x18"
    "0x18" "0x18" "0x18" "0x18" "0x1f" "0x00" "0x00" "0x00" "0x18" "0x18" "0x18" "0x18" "0xff" "0x00" "0x00" "0x00"
    "0x00" "0x00" "0x00" "0x00" "0xff" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0x1f" "0x18" "0x18" "0x18"
    "0x00" "0x00" "0x00" "0x00" "0xff" "0x00" "0x00" "0x00" "0x18" "0x18" "0x18" "0x18" "0xff" "0x18" "0x18" "0x18"
    "0x18" "0x18" "0x1f" "0x18" "0x1f" "0x18" "0x18" "0x18" "0x36" "0x36" "0x36" "0x36" "0x37" "0x36" "0x36" "0x36"
    "0x36" "0x36" "0x37" "0x30" "0x3f" "0x00" "0x00" "0x00" "0x00" "0x00" "0x3f" "0x30" "0x37" "0x36" "0x36" "0x36"
    "0x36" "0x36" "0xf7" "0x00" "0xff" "0x00" "0x00" "0x00" "0x00" "0x00" "0xff" "0x00" "0xf7" "0x36" "0x36" "0x36"
    "0x36" "0x36" "0x37" "0x30" "0x37" "0x36" "0x36" "0x36" "0x00" "0x00" "0xff" "0x00" "0xff" "0x00" "0x00" "0x00"
    "0x36" "0x36" "0xf7" "0x00" "0xf7" "0x36" "0x36" "0x36" "0x18" "0x18" "0xff" "0x00" "0xff" "0x00" "0x00" "0x00"
    "0x36" "0x36" "0x36" "0x36" "0xff" "0x00" "0x00" "0x00" "0x00" "0x00" "0xff" "0x00" "0xff" "0x18" "0x18" "0x18"
    "0x00" "0x00" "0x00" "0x00" "0xff" "0x36" "0x36" "0x36" "0x36" "0x36" "0x36" "0x36" "0x3f" "0x00" "0x00" "0x00"
    "0x18" "0x18" "0x1f" "0x18" "0x1f" "0x00" "0x00" "0x00" "0x00" "0x00" "0x1f" "0x18" "0x1f" "0x18" "0x18" "0x18"
    "0x00" "0x00" "0x00" "0x00" "0x3f" "0x36" "0x36" "0x36" "0x36" "0x36" "0x36" "0x36" "0xff" "0x36" "0x36" "0x36"
    "0x18" "0x18" "0xff" "0x18" "0xff" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0xf8" "0x00" "0x00" "0x00"
    "0x00" "0x00" "0x00" "0x00" "0x1f" "0x18" "0x18" "0x18" "0xff" "0xff" "0xff" "0xff" "0xff" "0xff" "0xff" "0xff"
    "0x00" "0x00" "0x00" "0x00" "0xff" "0xff" "0xff" "0xff" "0xf0" "0xf0" "0xf0" "0xf0" "0xf0" "0xf0" "0xf0" "0xf0"
    "0x0f" "0x0f" "0x0f" "0x0f" "0x0f" "0x0f" "0x0f" "0x0f" "0xff" "0xff" "0xff" "0xff" "0x00" "0x00" "0x00" "0x00"
    "0x00" "0x00" "0x76" "0xdc" "0xc8" "0xdc" "0x76" "0x00" "0x78" "0xcc" "0xcc" "0xd8" "0xcc" "0xc6" "0xcc" "0x00"
    "0xfe" "0xc6" "0xc0" "0xc0" "0xc0" "0xc0" "0xc0" "0x00" "0x00" "0x00" "0xfe" "0x6c" "0x6c" "0x6c" "0x6c" "0x00"
    "0xfe" "0xc6" "0x60" "0x30" "0x60" "0xc6" "0xfe" "0x00" "0x00" "0x00" "0x7e" "0xd8" "0xd8" "0xd8" "0x70" "0x00"
    "0x00" "0x00" "0x66" "0x66" "0x66" "0x66" "0x7c" "0xc0" "0x00" "0x76" "0xdc" "0x18" "0x18" "0x18" "0x18" "0x00"
    "0x7e" "0x18" "0x3c" "0x66" "0x66" "0x3c" "0x18" "0x7e" "0x38" "0x6c" "0xc6" "0xfe" "0xc6" "0x6c" "0x38" "0x00"
    "0x38" "0x6c" "0xc6" "0xc6" "0x6c" "0x6c" "0xee" "0x00" "0x0e" "0x18" "0x0c" "0x3e" "0x66" "0x66" "0x3c" "0x00"
    "0x00" "0x00" "0x7e" "0xdb" "0xdb" "0x7e" "0x00" "0x00" "0x06" "0x0c" "0x7e" "0xdb" "0xdb" "0x7e" "0x60" "0xc0"
    "0x1e" "0x30" "0x60" "0x7e" "0x60" "0x30" "0x1e" "0x00" "0x00" "0x7c" "0xc6" "0xc6" "0xc6" "0xc6" "0xc6" "0x00"
    "0x00" "0xfe" "0x00" "0xfe" "0x00" "0xfe" "0x00" "0x00" "0x18" "0x18" "0x7e" "0x18" "0x18" "0x00" "0x7e" "0x00"
    "0x30" "0x18" "0x0c" "0x18" "0x30" "0x00" "0x7e" "0x00" "0x0c" "0x18" "0x30" "0x18" "0x0c" "0x00" "0x7e" "0x00"
    "0x0e" "0x1b" "0x1b" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0x18" "0xd8" "0xd8" "0x70"
    "0x00" "0x18" "0x00" "0x7e" "0x00" "0x18" "0x00" "0x00" "0x00" "0x76" "0xdc" "0x00" "0x76" "0xdc" "0x00" "0x00"
    "0x38" "0x6c" "0x6c" "0x38" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x18" "0x18" "0x00" "0x00" "0x00"
    "0x00" "0x00" "0x00" "0x18" "0x00" "0x00" "0x00" "0x00" "0x0f" "0x0c" "0x0c" "0x0c" "0xec" "0x6c" "0x3c" "0x1c"
    "0x6c" "0x36" "0x36" "0x36" "0x36" "0x00" "0x00" "0x00" "0x78" "0x0c" "0x18" "0x30" "0x7c" "0x00" "0x00" "0x00"
    "0x00" "0x00" "0x3c" "0x3c" "0x3c" "0x3c" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00" "0x00"))

(defconstant FPS-UPPER-LIMIT 200)

(defconstant FPS-LOWER-LIMIT 1)

(defconstant FPS-DEFAULT 30)

(defcstruct FPS-manager
	(framecount :uint32)
	(rateticks :float)
	(lastticks :uint32)
	(rate :uint32))

(defcfun ("SDL-initFramerate" SDL-init-Frame-rate) :void
  (manager :pointer))

(defcfun ("SDL-setFramerate" SDL-set-Frame-rate) :int
  (manager :pointer)
  (rate :int))

(defcfun ("SDL-getFramerate" SDL-get-Frame-rate) :int
  (manager :pointer))

(defcfun ("SDL-framerateDelay" SDL-frame-rate-Delay) :void
  (manager :pointer))

(defconstant M-PI 3.141592654)

(defconstant SMOOTHING-OFF 0)

(defconstant SMOOTHING-ON 1)

(defcstruct t-Color-RGBA
	(r :uint8)
	(g :uint8)
	(b :uint8)
	(a :uint8))

(defcstruct t-Color-Y
	(y :uint8))


(defctype sdl-gfx-font-data :pointer)

(defcfun ("rotozoomSurface" rotozoom-Surface) :pointer
  (src sdl-cffi::sdl-surface)
  (angle :double)
  (zoom :double)
  (smooth :int))

(defcfun ("rotozoomSurfaceXY" rotozoom-Surface-XY) :pointer
  (src sdl-cffi::sdl-surface)
  (angle :double)
  (zoomx :double)
  (zoomy :double)
  (smooth :int))

(defcfun ("rotozoomSurfaceSize" rotozoom-Surface-Size) :void
  (width :int)
  (height :int)
  (angle :double)
  (zoom :double)
  (dstwidth :pointer)
  (dstheight :pointer))

(defcfun ("rotozoomSurfaceSizeXY" rotozoom-Surface-Size-XY) :void
  (width :int)
  (height :int)
  (angle :double)
  (zoomx :double)
  (zoomy :double)
  (dstwidth :pointer)
  (dstheight :pointer))

(defcfun ("zoomSurface" zoom-Surface) :pointer
  (src sdl-cffi::sdl-surface)
  (zoomx :double)
  (zoomy :double)
  (smooth :int))

(defcfun ("zoomSurfaceSize" zoom-Surface-Size) :void
  (width :int)
  (height :int)
  (zoomx :double)
  (zoomy :double)
  (dstwidth :pointer)
  (dstheight :pointer))


(defcfun ("SDL-imageFilterMMXdetect" SDL-image-Filter-MMX-detect) :int)

(defcfun ("SDL-imageFilterMMXoff" SDL-image-Filter-MMX-off) :void)

(defcfun ("SDL-imageFilterMMXon" SDL-image-Filter-MMX-on) :void)

(defcfun ("SDL-imageFilterAdd" SDL-image-Filter-Add) :int
  (Src1 :pointer)
  (Src2 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterMean" SDL-image-Filter-Mean) :int
  (Src1 :pointer)
  (Src2 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterSub" SDL-image-Filter-Sub) :int
  (Src1 :pointer)
  (Src2 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterAbsDiff" SDL-image-Filter-Abs-Diff) :int
  (Src1 :pointer)
  (Src2 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterMult" SDL-image-Filter-Mult) :int
  (Src1 :pointer)
  (Src2 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterMultNor" SDL-image-Filter-Mult-Nor) :int
  (Src1 :pointer)
  (Src2 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterMultDivby2" SDL-image-Filter-Mult-Div-by-2) :int
  (Src1 :pointer)
  (Src2 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterMultDivby4" SDL-image-Filter-Mult-Div-by-4) :int
  (Src1 :pointer)
  (Src2 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterBitAnd" SDL-image-Filter-Bit-And) :int
  (Src1 :pointer)
  (Src2 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterBitOr" SDL-image-Filter-Bit-Or) :int
  (Src1 :pointer)
  (Src2 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterDiv" SDL-image-Filter-Div) :int
  (Src1 :pointer)
  (Src2 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterBitNegation" SDL-image-Filter-Bit-Negation) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int))

(defcfun ("SDL-imageFilterAddByte" SDL-image-Filter-Add-Byte) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (C :unsigned-char))

(defcfun ("SDL-imageFilterAddUint" SDL-image-Filter-Add-Uint) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (C :unsigned-int))

(defcfun ("SDL-imageFilterAddByteToHalf" SDL-image-Filter-Add-Byte-To-Half) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (C :unsigned-char))

(defcfun ("SDL-imageFilterSubByte" SDL-image-Filter-Sub-Byte) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (C :unsigned-char))

(defcfun ("SDL-imageFilterSubUint" SDL-image-Filter-Sub-Uint) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (C :unsigned-int))

(defcfun ("SDL-imageFilterShiftRight" SDL-image-Filter-Shift-Right) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (N :unsigned-char))

(defcfun ("SDL-imageFilterShiftRightUint" SDL-image-Filter-Shift-Right-Uint) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (N :unsigned-char))

(defcfun ("SDL-imageFilterMultByByte" SDL-image-Filter-Mult-By-Byte) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (C :unsigned-char))

(defcfun ("SDL-imageFilterShiftRightAndMultByByte" SDL-image-Filter-Shift-Right-And-Mult-By-Byte) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (N :unsigned-char)
  (C :unsigned-char))

(defcfun ("SDL-imageFilterShiftLeftByte" SDL-image-Filter-Shift-Left-Byte) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (N :unsigned-char))

(defcfun ("SDL-imageFilterShiftLeftUint" SDL-image-Filter-Shift-Left-Uint) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (N :unsigned-char))

(defcfun ("SDL-imageFilterShiftLeft" SDL-image-Filter-Shift-Left) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (N :unsigned-char))

(defcfun ("SDL-imageFilterBinarizeUsingThreshold" SDL-image-Filter-Binarize-Using-Threshold) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (t-arg3 :unsigned-char))

(defcfun ("SDL-imageFilterClipToRange" SDL-image-Filter-Clip-To-Range) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (Tmin :unsigned-char)
  (Tmax :unsigned-char))

(defcfun ("SDL-imageFilterNormalizeLinear" SDL-image-Filter-Normalize-Linear) :int
  (Src1 :pointer)
  (Dest :pointer)
  (length :int)
  (Cmin :int)
  (Cmax :int)
  (Nmin :int)
  (Nmax :int))

(defcfun ("SDL-imageFilterConvolveKernel3x3Divide" SDL-image-Filter-Convolve-Kernel-3x3-Divide) :int
  (Src :pointer)
  (Dest :pointer)
  (rows :int)
  (columns :int)
  (Kernel :pointer)
  (Divisor :unsigned-char))

(defcfun ("SDL-imageFilterConvolveKernel5x5Divide" SDL-image-Filter-Convolve-Kerne-l5x5-Divide) :int
  (Src :pointer)
  (Dest :pointer)
  (rows :int)
  (columns :int)
  (Kernel :pointer)
  (Divisor :unsigned-char))

(defcfun ("SDL-imageFilterConvolveKernel7x7Divide" SDL-image-Filter-Convolve-Kernel-7x7-Divide) :int
  (Src :pointer)
  (Dest :pointer)
  (rows :int)
  (columns :int)
  (Kernel :pointer)
  (Divisor :unsigned-char))

(defcfun ("SDL-imageFilterConvolveKernel9x9Divide" SDL-image-Filter-Convolve-Kernel-9x9-Divide) :int
  (Src :pointer)
  (Dest :pointer)
  (rows :int)
  (columns :int)
  (Kernel :pointer)
  (Divisor :unsigned-char))

(defcfun ("SDL-imageFilterConvolveKernel3x3ShiftRight" SDL-image-Filter-Convolve-Kernel-3x3-Shift-Right) :int
  (Src :pointer)
  (Dest :pointer)
  (rows :int)
  (columns :int)
  (Kernel :pointer)
  (NRightShift :unsigned-char))

(defcfun ("SDL-imageFilterConvolveKernel5x5ShiftRight" SDL-image-Filter-Convolve-Kernel-5x5-Shift-Right) :int
  (Src :pointer)
  (Dest :pointer)
  (rows :int)
  (columns :int)
  (Kernel :pointer)
  (NRightShift :unsigned-char))

(defcfun ("SDL-imageFilterConvolveKernel7x7ShiftRight" SDL-image-Filter-Convolve-Kernel-7x7-Shift-Right) :int
  (Src :pointer)
  (Dest :pointer)
  (rows :int)
  (columns :int)
  (Kernel :pointer)
  (NRightShift :unsigned-char))

(defcfun ("SDL-imageFilterConvolveKernel9x9ShiftRight" SDL-image-Filter-Convolve-Kernel-9x9-Shift-Right) :int
  (Src :pointer)
  (Dest :pointer)
  (rows :int)
  (columns :int)
  (Kernel :pointer)
  (NRightShift :unsigned-char))

(defcfun ("SDL-imageFilterSobelX" SDL-image-Filter-Sobel-X) :int
  (Src :pointer)
  (Dest :pointer)
  (rows :int)
  (columns :int))

(defcfun ("SDL-imageFilterSobelXShiftRight" SDL-image-Filter-Sobel-X-Shift-Right) :int
  (Src :pointer)
  (Dest :pointer)
  (rows :int)
  (columns :int)
  (NRightShift :unsigned-char))

(defcfun ("SDL-imageFilterAlignStack" SDL-image-Filter-Align-Stack) :void)

(defcfun ("SDL-imageFilterRestoreStack" SDL-image-Filter-Restore-Stack) :void)

(defconstant GFX-FONT-DATA-MAX 2048)

(defconstant SDL-GFX-PRIMITIVES-MAJOR 2)

(defconstant SDL-GFX-PRIMITIVES-MINOR 0)

(defconstant SDL-GFX-PRIMITIVES-MICRO 13)


(defcfun ("pixelColor" pixel-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (color :uint32))

(defcfun ("pixelRGBA" pixel-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("hlineColor" hline-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (x2 :int16)
  (y :int16)
  (color :uint32))

(defcfun ("hlineRGBA" hline-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (x2 :int16)
  (y :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("vlineColor" vline-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y1 :int16)
  (y2 :int16)
  (color :uint32))

(defcfun ("vlineRGBA" vline-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y1 :int16)
  (y2 :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("rectangleColor" rectangle-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (color :uint32))

(defcfun ("rectangleRGBA" rectangle-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("boxColor" box-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (color :uint32))

(defcfun ("boxRGBA" box-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("lineColor" line-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (color :uint32))

(defcfun ("lineRGBA" line-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("aalineColor" aa-line-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (color :uint32))

(defcfun ("aalineRGBA" aa-line-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("circleColor" circle-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (r :int16)
  (color :uint32))

(defcfun ("circleRGBA" circle-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rad :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("aacircleColor" aa-circle-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (r :int16)
  (color :uint32))

(defcfun ("aacircleRGBA" aa-circle-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rad :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("filledCircleColor" filled-Circle-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (r :int16)
  (color :uint32))

(defcfun ("filledCircleRGBA" filled-Circle-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rad :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("ellipseColor" ellipse-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rx :int16)
  (ry :int16)
  (color :uint32))

(defcfun ("ellipseRGBA" ellipse-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rx :int16)
  (ry :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("aaellipseColor" aa-ellipse-Color) :int
  (dst sdl-cffi::sdl-surface)
  (xc :int16)
  (yc :int16)
  (rx :int16)
  (ry :int16)
  (color :uint32))

(defcfun ("aaellipseRGBA" aa-ellipse-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rx :int16)
  (ry :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("filledEllipseColor" filled-Ellipse-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rx :int16)
  (ry :int16)
  (color :uint32))

(defcfun ("filledEllipseRGBA" filled-Ellipse-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rx :int16)
  (ry :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("pieColor" pie-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rad :int16)
  (start :int16)
  (end :int16)
  (color :uint32))

(defcfun ("pieRGBA" pie-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rad :int16)
  (start :int16)
  (end :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("filledPieColor" filled-Pie-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rad :int16)
  (start :int16)
  (end :int16)
  (color :uint32))

(defcfun ("filledPieRGBA" filled-Pie-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (rad :int16)
  (start :int16)
  (end :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("trigonColor" trigon-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (x3 :int16)
  (y3 :int16)
  (color :uint32))

(defcfun ("trigonRGBA" trigon-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (x3 :int16)
  (y3 :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("aatrigonColor" aa-trigon-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (x3 :int16)
  (y3 :int16)
  (color :uint32))

(defcfun ("aatrigonRGBA" aa-trigon-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (x3 :int16)
  (y3 :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("filledTrigonColor" filled-Trigon-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (x3 :int16)
  (y3 :int16)
  (color :uint32))

(defcfun ("filledTrigonRGBA" filled-Trigon-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x1 :int16)
  (y1 :int16)
  (x2 :int16)
  (y2 :int16)
  (x3 :int16)
  (y3 :int16)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("polygonColor" polygon-Color) :int
  (dst sdl-cffi::sdl-surface)
  (vx :pointer)
  (vy :pointer)
  (n :int)
  (color :uint32))

(defcfun ("polygonRGBA" polygon-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (vx :pointer)
  (vy :pointer)
  (n :int)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("aapolygonColor" aa-polygon-Color) :int
  (dst sdl-cffi::sdl-surface)
  (vx :pointer)
  (vy :pointer)
  (n :int)
  (color :uint32))

(defcfun ("aapolygonRGBA" aa-polygon-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (vx :pointer)
  (vy :pointer)
  (n :int)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("filledPolygonColor" filled-Polygon-Color) :int
  (dst sdl-cffi::sdl-surface)
  (vx :pointer)
  (vy :pointer)
  (n :int)
  (color :uint32))

(defcfun ("filledPolygonRGBA" filled-Polygon-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (vx :pointer)
  (vy :pointer)
  (n :int)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("bezierColor" bezier-Color) :int
  (dst sdl-cffi::sdl-surface)
  (vx :pointer)
  (vy :pointer)
  (n :int)
  (s :int)
  (color :uint32))

(defcfun ("bezierRGBA" bezier-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (vx :pointer)
  (vy :pointer)
  (n :int)
  (s :int)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("characterColor" character-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (c :char)
  (color :uint32))

(defcfun ("characterRGBA" character-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (c :char)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("stringColor" string-Color) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (c :string)
  (color :uint32))

(defcfun ("stringRGBA" string-RGBA) :int
  (dst sdl-cffi::sdl-surface)
  (x :int16)
  (y :int16)
  (c :string)
  (r :uint8)
  (g :uint8)
  (b :uint8)
  (a :uint8))

(defcfun ("gfxPrimitivesSetFont" gfx-Primitives-Set-Font) :void
  (fontdata sdl-gfx-font-data)
  (cw :int)
  (ch :int))


(defmethod translate-to-foreign (value (type (eql 'sdl-gfx-font-data)))
  (let ((gfxPrimitivesFontdata (cffi:foreign-alloc :char :count (length value) :initial-element 0)))
    (dotimes (i (length value))
      (setf (cffi:mem-aref gfxPrimitivesFontdata :unsigned-char i) (parse-integer (first value)
										  :junk-allowed t :start 2 :radix 16))
      (setf value (cdr value)))
    (values gfxPrimitivesFontdata t)))

(defmethod free-translated-object (ptr (name (eql 'sdl-gfx-font-data)) free-p)
  (if free-p
      (cffi:foreign-free ptr)))
